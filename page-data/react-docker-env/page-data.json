{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-docker-env/","webpackCompilationHash":"18dc3150fb6f5d691970","result":{"data":{"site":{"siteMetadata":{"title":"Rashad Kokash","author":"Rashad Kokash"}},"markdownRemark":{"id":"d6a70791-794a-5de8-b0f7-363821071f54","html":"<h3>The problem</h3>\n<p>The output of building react app is html and javascript that lives on the browser, thus, it can’t access system’s environment variables. You can only access them at build time thanks to the bundler (which runs on node.js).</p>\n<p>The problem comes when you want to pass environment variables, like the api url, when spinning a docker container of the app (at runtime). Something like this:</p>\n<p><code class=\"language-text\">docker run -e &quot;REACT_APP_API_URL=http://my.todo.api&quot; todoapp</code></p>\n<p>Which will not work even if you use <code class=\"language-text\">process.env.API_URL</code> in your react project.</p>\n<blockquote>\n<p>process.env.API_URL will store the build time value, not the runtime one</p>\n</blockquote>\n<h3>The solution</h3>\n<p>Why not attatch these environment variables to the <code class=\"language-text\">window</code> object, which is accessible by browser’s javascript, each time we spin up a container ?</p>\n<p>We will do it with a shell script that creates a file <code class=\"language-text\">env.js</code>, attach the system environment variables to the <code class=\"language-text\">window</code> object in this file.</p>\n<p>And then we link this script <code class=\"language-text\">env.js</code> in react’s <code class=\"language-text\">index.html</code>.</p>\n<h4>Step 1</h4>\n<p>Let’s create the shell script that will read environment variables and write them to <code class=\"language-text\">env.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token comment\"># Since I am going to use nginx image to serve my app, env.js should exists in /usr/share/nginx/html</span>\n<span class=\"token comment\"># This path points to where index.html will exist</span>\n<span class=\"token assign-left variable\">ENV_FILE_PATH</span><span class=\"token operator\">=</span>/usr/share/nginx/html/env.js\n\n\n<span class=\"token comment\"># Clear previously created env.js file</span>\n<span class=\"token function\">rm</span> -rf <span class=\"token variable\">$ENV_FILE_PATH</span>\n\n<span class=\"token comment\"># Create it again</span>\n<span class=\"token function\">touch</span> <span class=\"token variable\">$ENV_FILE_PATH</span>\n\n<span class=\"token comment\">## In this file, let's attatch an object called `__ENV__` to the window object</span>\n<span class=\"token comment\">## We don't close the object with } because we will put environment variables in it</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"window.__ENV__ = {\"</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$ENV_FILE_PATH</span> \n\n<span class=\"token comment\"># For variable in system environment variables</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">line</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">env</span><span class=\"token variable\">`</span></span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># If it starts with `REACT_APP` (because we don't want to expose all environment variables)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -z <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">echo</span> $line <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> REACT_APP<span class=\"token variable\">`</span></span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">then</span>\n    <span class=\"token comment\"># Because SH does not support arrays I can't split the environment variables by '='</span>\n    <span class=\"token comment\"># So I remove '=' and everything after it to get the name, e.x `REACT_APP_API_URL`</span>\n    <span class=\"token comment\"># And I remove '=' and everything before it to get the value, e.x `http://api.todo.com`</span>\n    <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">echo</span> $line <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/=.*//'</span><span class=\"token variable\">`</span></span>\n    <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">echo</span> $line <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/.*=//'</span><span class=\"token variable\">`</span></span>\n\n    <span class=\"token comment\">## Print the name and the value in our __ENV__ object</span>\n    <span class=\"token comment\">## e.x REACT_APP_API_URL: \"http://api.todo.com\",</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$name</span>: '<span class=\"token variable\">$value</span>',\"</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$ENV_FILE_PATH</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\">## Finally, close the __ENV__ object in env.js</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"};\"</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$ENV_FILE_PATH</span></code></pre></div>\n<p>Suppose our env is something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ env\nSECRET_KEY=securityisamust\nREACT_APP_COLOR=red\nREACT_APP_MODE=light\nDO_NOT_EXPOSE=verysecurepassword</code></pre></div>\n<p>The resulting <code class=\"language-text\">env.js</code> after running the script above would be like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>__ENV__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token constant\">REACT_APP_COLOR</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token constant\">REACT_APP_MODE</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"light\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now link this <code class=\"language-text\">env.js</code> file in your <code class=\"language-text\">index.html</code></p>\n<p><code class=\"language-text\">&lt;script src=&quot;%PUBLIC_URL%/env.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>And start using <code class=\"language-text\">window.__ENV__</code> instead of <code class=\"language-text\">process.env</code>.</p>\n<h4>Step 2</h4>\n<p>Run the shell script each time you spin up the container.</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>10<span class=\"token punctuation\">-</span>alpine as builder\n\n<span class=\"token keyword\">WORKDIR</span> /app\n<span class=\"token keyword\">COPY</span> . .\n\n<span class=\"token comment\">## Build the app</span>\n<span class=\"token keyword\">RUN</span> yarn install &amp;&amp; yarn build\n\n<span class=\"token keyword\">FROM</span> nginx<span class=\"token punctuation\">:</span>alpine as server\n\n<span class=\"token comment\">## Copy your react app to nginx image</span>\n<span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>from=builder /app/build /usr/share/nginx/html\n\n<span class=\"token comment\">## Copy the script we've written above to /data</span>\n<span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>from=builder /app/resolve<span class=\"token punctuation\">-</span>env.sh /data\n\n<span class=\"token comment\">## Give it permission to be executed</span>\n<span class=\"token keyword\">RUN</span> chmod +x /data/resolve<span class=\"token punctuation\">-</span>env.sh\n\n<span class=\"token comment\">## Run the shell script each time you spin up the container and then run nginx</span>\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/data/resolve-env.sh &amp;&amp; nginx -g \\\"daemon off;\\\"\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Now try <code class=\"language-text\">docker run -e &quot;REACT_APP_API_URL=http://my.todo.api&quot; todoapp</code> and whish me happy days like the one you’ve just had.</p>","frontmatter":{"title":"Passing environment variables from docker run to a react app","date":"December 03, 2019","featuredImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-docker-env/","previous":{"fields":{"slug":"/every-thing-wc/"},"excerpt":"wc stands for word count. It’s used to count bytes, lines, characters and words in files. Usage . wc command accepts optional list of…","frontmatter":{"title":"Everything you need to know about wc command in Linux","date":"September 2, 2019","featuredImage":null}},"next":null}}}