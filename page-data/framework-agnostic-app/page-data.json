{"componentChunkName":"component---src-templates-blog-post-js","path":"/framework-agnostic-app/","webpackCompilationHash":"9b671397ad83b6a03271","result":{"data":{"site":{"siteMetadata":{"title":"Rashad Kokash","author":"Rashad Kokash"}},"markdownRemark":{"id":"babade54-3e6c-516b-b6c7-bd878f6b2f99","html":"<p>We need this mainly for two reasons:</p>\n<ol>\n<li>Being able to mock functionalities in tests. So for example I can mock the database and not connect to a real database in tests.</li>\n<li>Being able to refactor and adapt better technologies in the future.</li>\n</ol>\n<h2>Introduction</h2>\n<p>I am going to prove this concept by implementing a small todo app, well, a part of it because all the other functionalities will follow the same implementation way.</p>\n<p>I am going to implement the <code class=\"language-text\">create todo</code> functionality and maybe discuss the other functionalities.</p>\n<p><strong>NOTE</strong>:\nI am going to go simple but of course there are more to do if you want to build an enterprise level application.</p>\n<h2>3 Layers</h2>\n<ul>\n<li><strong>Repository</strong>: which is a layer that will abstract the interaction with the database, so we’re not tightly coupled to MongoDB or MySQL.</li>\n<li><strong>Usecases</strong>: which is a layer that will execute the business logic. And it will benifit from the <strong>Repository</strong> layer to persist data.</li>\n<li><strong>Controller</strong>: which is a layer that will abstract the http requests and reponses, checks for permissions and validate user input. And it will execute the <strong>Usecases</strong>.</li>\n</ul>\n<h3>The Repository</h3>\n<p>The repository is just an interface that will abstract the interaction with the database, so for example, in our todo app we need 4 functionalities:</p>\n<ul>\n<li>List todos</li>\n<li>Create a todo</li>\n<li>Update a todo</li>\n<li>Delete a todo</li>\n</ul>\n<p>And for simplicity, let’s assume our todos will only containt the todo title, its ID and nothing else. So first of all let’s declare the Todo schema.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ITodoSchema</span> <span class=\"token punctuation\">{</span>\n  _id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And our repository interface will abstract the 4 functionalities above like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ITodoRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">listTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>ITodoSchema<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">:</span> ITodoSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">:</span> ITodoSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">deleteTodo</span><span class=\"token punctuation\">(</span>todoId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>The Usecase</h3>\n<p>A usecase is just class that will take some input, executes a functionality of our app and return some output.</p>\n<p>A usecase will not execute the logic if it will break the domain rules. So for example a usecase for registering users will not allow multiple users with the same email.</p>\n<p>Let’s declare an interface for the usecase so that all of our usecase classes implement it.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUsecase</span><span class=\"token operator\">&lt;</span>Input<span class=\"token punctuation\">,</span> Output<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> Input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Output<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And as I mentioned above, I will only implement the <code class=\"language-text\">create todo</code> functionality. So let’s do it.</p>\n<p>First of all, to create a new todo we need its ID and its title. We will get the title from the usecase input and we will generate the id. The usecase will then return a todo (ITodoSchema) as an output.</p>\n<p>This usecase needs to persist the new todo in the database so we will inject the todo repository in its constructor.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CreateTodoUsecaseInput</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateTodoUsecase</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IUsecase</span><span class=\"token operator\">&lt;</span>CreateTodoUsecaseInput<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>ITodoSchema<span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> todoRepository<span class=\"token punctuation\">:</span> ITodoRepository<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todoRepository<span class=\"token punctuation\">:</span> ITodoRepository</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoRepository <span class=\"token operator\">=</span> todoRepository<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> CreateTodoUsecaseInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>ITodoSchema<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newTodo<span class=\"token punctuation\">:</span> ITodoSchema <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      _id<span class=\"token punctuation\">:</span> <span class=\"token function\">generateSomeUniqueId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token punctuation\">:</span> input<span class=\"token punctuation\">.</span>title\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>newTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> newTodo<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see the usecase never knows about mongo or mysql nor it knows about http (because we might need to do a CLI version of our app).</p>\n<p>I simply depends on an interface of the todos repository and doesn’t know anything about the repository actual implemention.</p>\n<h3>The Controller</h3>\n<p>In this article, the aim of the controller is just to abstract the interaction with the web. So the controller will never know if it’s being called from a REST api, Graphql or AWS Lambda. It gets a standard http request and will return a standard http response.</p>\n<p>First of all, let’s abstract the http request and response and write an interface for the controller.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IHTTPRequest</span> <span class=\"token punctuation\">{</span>\n  headers<span class=\"token punctuation\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IHTTPResponse</span> <span class=\"token punctuation\">{</span>\n  statusCode<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  headers<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> IHTTPRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IHTTPResponse<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And as we said before, the controller will validate the input and pass it to the usecase layer to execute the business logic.</p>\n<p>And again we will inject the usecase in its constructor.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateTodoController</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> createTodo<span class=\"token punctuation\">:</span> CreateTodoUsecase<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">createTodo<span class=\"token punctuation\">:</span> CreateTodoUsecase</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createTodo <span class=\"token operator\">=</span> createTodo<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> IHTTPRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IHTTPResponse<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n          response<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            error<span class=\"token punctuation\">:</span> <span class=\"token string\">'Invalid input'</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> createTodoInput<span class=\"token punctuation\">:</span> CreateTodoUsecaseInput <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>title\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createTodo<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>createTodoInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span>\n        response<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          data<span class=\"token punctuation\">:</span> todo\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n        response<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          error<span class=\"token punctuation\">:</span> <span class=\"token string\">'Something wrong happened'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Putting it all together</h3>\n<p>So far we have an implementation of the controller, the usecase but not the repository. So let’s implement a MongoDB implementation of it.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MongoDBTodoRepository</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ITodoRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> db<span class=\"token punctuation\">:</span> Db<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">db<span class=\"token punctuation\">:</span> Db</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">:</span> ITodoSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> insertedCount <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">insertOne</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> insertedCount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ..... Rest of the methods</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What we can do now is instantiate a repository, suply it to the usecase which we will suply to the controller and then use the controller with whatever framework we want.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> db <span class=\"token keyword\">from</span> <span class=\"token string\">'./db'</span>\n\n<span class=\"token keyword\">const</span> todoRepository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoDBTodoRepository</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> createTodoUsecase <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CreateTodoUsecase</span><span class=\"token punctuation\">(</span>todoRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> createTodoController <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CreateTodoController</span><span class=\"token punctuation\">(</span>createTodoUsecase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>With Express</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/v1/todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      headers<span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>headers <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>body\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> createTodoController<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token punctuation\">:</span> <span class=\"token string\">'Something wrong happened'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>With AWS Lambda</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      headers<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>body\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> createTodoController<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      statusCode<span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        error<span class=\"token punctuation\">:</span> <span class=\"token string\">'Something wrong happened'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>As you can see we were able to use the same code with express and aws lamda, and you can implement an adapter for each so that you don’t repeat the same adaptation code again.</p>\n<p>And we are not coupled to MongoDB, when you need to move to SQL, simply implement an SQL version of <code class=\"language-text\">ITodoRepository</code> and supply it to your usecases.</p>\n<p>But anyway. I went very simple in this app just to provide a proof of concept and of course there a lot more to add.</p>\n<p><strong>AND PLEASE DON’T OVERENGINEER SIMPLE AND SMALL APPS</strong></p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">The Clean Architecture</a></li>\n<li><a href=\"https://martinfowler.com/eaaCatalog/repository.html\">The Repository Pattern</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=pMuiVlnGqjk\">Domain Driven Desing</a></li>\n</ul>","frontmatter":{"title":"Building framework independent, database agnostic web application (Node.js)","date":"December 27, 2020","featuredImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/framework-agnostic-app/","previous":{"fields":{"slug":"/react-docker-env/"},"excerpt":"The problem The output of building react app is html and javascript that lives on the browser, thus, it can’t access system’s environment…","frontmatter":{"title":"Passing environment variables from docker run to a react app","date":"December 3, 2019","featuredImage":null}},"next":null}}}