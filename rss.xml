<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rashad Kokash]]></title><description><![CDATA[Full-stack Web Developer & DevOps Enthusiast]]></description><link>https://FrankenSteinxD.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 03 Dec 2019 07:04:16 GMT</lastBuildDate><item><title><![CDATA[Passing environment variables from docker run to a react app]]></title><description><![CDATA[The problem The output of building react app is html and javascript that lives on the browser, thus, it can’t access system environment…]]></description><link>https://FrankenSteinxD.github.io/react-runtime-environment-variables-with-docker/react-runtime-environment-variables-with-docker/</link><guid isPermaLink="false">https://FrankenSteinxD.github.io/react-runtime-environment-variables-with-docker/react-runtime-environment-variables-with-docker/</guid><pubDate>Tue, 03 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;The problem&lt;/h3&gt;
&lt;p&gt;The output of building react app is html and javascript that lives on the browser, thus, it can’t access system environment variables. You can only access then at build time, thanks to the bundler (which runs on node.js).&lt;/p&gt;
&lt;p&gt;The problem comes when you want to pass environment variables, like the api url, when spinning a docker container of the app (at runtime). Something like this:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker run -e &amp;quot;API_URL=http://my.todo.api&amp;quot; todoapp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which will not work even if you use &lt;code class=&quot;language-text&quot;&gt;process.env.API_URL&lt;/code&gt; in your react project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;process.env.API_URL will store the build time value, not the runtime one&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;The solution&lt;/h3&gt;
&lt;p&gt;Why not attatch these environment variables to the &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; object, which is accessible by browser’s javascript, each time we spin up a container ?&lt;/p&gt;
&lt;p&gt;We will do it with a shell script that creates a file &lt;code class=&quot;language-text&quot;&gt;env.js&lt;/code&gt;, attach the system environment variables to the &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; object in this file.&lt;/p&gt;
&lt;p&gt;And then we link this script &lt;code class=&quot;language-text&quot;&gt;env.js&lt;/code&gt; in react’s &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Step 1&lt;/h4&gt;
&lt;p&gt;Let’s create the shell script that will read environment variables and write them to &lt;code class=&quot;language-text&quot;&gt;env.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Since I am going to use nginx image to serve my app, env.js should exists in /usr/share/nginx/html&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# This path points to where index.html will exist&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;ENV_FILE_PATH&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/share/nginx/html


&lt;span class=&quot;token comment&quot;&gt;# Clear previously created env.js file&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -rf &lt;span class=&quot;token variable&quot;&gt;$ENV_FILE_PATH&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Create it again&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$ENV_FILE_PATH&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;## In this file, let&apos;s attatch an object called `__ENV__` to the window object&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## We don&apos;t close the object with } because we will put environment variables in it&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;window.__ENV__ = {&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$ENV_FILE&lt;/span&gt; 

&lt;span class=&quot;token comment&quot;&gt;# For variable in system environment variables&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# If it starts with `REACT_APP` (because we don&apos;t want to expose all environment variables)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; -z &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; $line &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; REACT_APP&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Because SH does not support arrays I can&apos;t split the environment variables by &apos;=&apos;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# So I remove &apos;=&apos; and everything after it to get the name, e.x `REACT_APP_API_URL`&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# And I remove &apos;=&apos; and everything before it to get the value, e.x `http://api.todo.com`&lt;/span&gt;
    &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; $line &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;s/=.*//&apos;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token assign-left variable&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; $line &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;s/.*=//&apos;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;## Print the name and the value in our __ENV__ object&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;## e.x REACT_APP_API_URL: &quot;http://api.todo.com&quot;,&lt;/span&gt;
    &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt;: &apos;&lt;span class=&quot;token variable&quot;&gt;$value&lt;/span&gt;&apos;,&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$ENV_FILE&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;## Finally, close the __ENV__ object in env.js&lt;/span&gt;

&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;};&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$ENV_FILE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Suppose our env is something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ env
SECRET_KEY=securityisamust
REACT_APP_COLOR=red
REACT_APP_MODE=light
DO_NOT_EXPOSE=verysecurepassword&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The resulting &lt;code class=&quot;language-text&quot;&gt;env.js&lt;/code&gt; after running the script above would be like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__ENV__ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;REACT_APP_COLOR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;REACT_APP_MODE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;light&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now link this &lt;code class=&quot;language-text&quot;&gt;env.js&lt;/code&gt; file in your &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script src=&amp;quot;%PUBLIC_URL%/env.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And start using &lt;code class=&quot;language-text&quot;&gt;window.__ENV__&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;process.env&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Step 2&lt;/h4&gt;
&lt;p&gt;Run the script each time you spin up the container.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;docker&quot;&gt;&lt;pre class=&quot;language-docker&quot;&gt;&lt;code class=&quot;language-docker&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine as builder

&lt;span class=&quot;token keyword&quot;&gt;WORKDIR&lt;/span&gt; /app
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; . .

&lt;span class=&quot;token comment&quot;&gt;## Build the app&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; yarn install &amp;amp;&amp;amp; yarn build

&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; nginx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;alpine as server

&lt;span class=&quot;token comment&quot;&gt;## Copy your react app to nginx image&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;from=builder /app/build /usr/share/nginx/html

&lt;span class=&quot;token comment&quot;&gt;## Copy the script we&apos;ve written above to /tmp&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;from=builder /app/resolve&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;env.sh /tmp

&lt;span class=&quot;token comment&quot;&gt;## Give it permission to be executed&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; chmod +x /tmp/resolve&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;env.sh

&lt;span class=&quot;token comment&quot;&gt;## Run the script each time you spin up the container and then run nginx&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/tmp/resolve-env.sh &amp;amp;&amp;amp; nginx -g \&quot;daemon off;\&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now try &lt;code class=&quot;language-text&quot;&gt;docker run -e &amp;quot;API_URL=http://my.todo.api&amp;quot; todoapp&lt;/code&gt; and whish me happy days like the one you’ve just had.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Everything you need to know about wc command in Linux]]></title><description><![CDATA[wc stands for word count. It’s used to count bytes, lines, characters and words in files. Usage . wc command accepts optional list of…]]></description><link>https://FrankenSteinxD.github.io/every-thing-wc/</link><guid isPermaLink="false">https://FrankenSteinxD.github.io/every-thing-wc/</guid><pubDate>Mon, 02 Sep 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;wc&lt;/strong&gt; stands for &lt;strong&gt;word count&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It’s used to count bytes, lines, characters and words in files.&lt;/p&gt;
&lt;h1&gt;Usage&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;wc [option]... [file]...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;wc&lt;/strong&gt; command accepts optional list of options and an optional list of files.&lt;/p&gt;
&lt;p&gt;If no options were specified, &lt;strong&gt;wc&lt;/strong&gt; will print new line, word and byte counts for the specified files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Suppose we have a file called &lt;strong&gt;text.txt&lt;/strong&gt; which contains the following text:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;hello world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By passing &lt;strong&gt;text.txt&lt;/strong&gt; to &lt;strong&gt;wc&lt;/strong&gt; we get:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; text.txt
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt; text.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which means that we have 1 new line (\n or \n\r), 2 words and 12 bytes in &lt;strong&gt;text.txt&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If no files where specified to &lt;strong&gt;wc&lt;/strong&gt;, it will take standard input as its input. You type what you want and then press &lt;code class=&quot;language-text&quot;&gt;Ctrl + D&lt;/code&gt; twice to end input.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt;
hello, world
my name is Rashad
  &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have 2 new lines, 6 words and 31 bytes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that there’s new line (I pressed Enter) after &lt;code class=&quot;language-text&quot;&gt;Rashad&lt;/code&gt; and then I pressed &lt;code class=&quot;language-text&quot;&gt;Ctrl + D&lt;/code&gt;.&lt;br&gt;If I didn’t press Enter wc output would be like &lt;code class=&quot;language-text&quot;&gt;1 6 30&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Options&lt;/h1&gt;
&lt;p&gt;You could customize &lt;strong&gt;wc&lt;/strong&gt; output by passing it one or more of the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-c&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;--bytes&lt;/code&gt; which is used to count byte of input.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we have a text &lt;strong&gt;text.txt&lt;/strong&gt; file that has the following text:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;I love pizza&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -c text.txt
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; text.txt

$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; --bytes text.txt
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; text.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-m&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;--chars&lt;/code&gt; which is used to count characters of input.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -m text.txt
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; text.txt

$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; --chars text.txt
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; text.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There’s no difference between &lt;code class=&quot;language-text&quot;&gt;-m&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;-c&lt;/code&gt; if the file contains only &lt;strong&gt;ASCII&lt;/strong&gt; characters because each &lt;strong&gt;ASCII&lt;/strong&gt; character will take only one byte.&lt;/p&gt;
&lt;p&gt;But they differ when there’s &lt;strong&gt;Unicode&lt;/strong&gt; characters in the file, some characters might take 2 or 4 bytes.&lt;/p&gt;
&lt;p&gt;Read the example below in the summary.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-l&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;--lines&lt;/code&gt; which is used to count new lines of input.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we have a text &lt;strong&gt;text.txt&lt;/strong&gt; file that has the following text:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;hello
world
this
is
new
line&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l text.txt
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; text.txt

$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; --lines text.txt
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; text.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-w&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;--words&lt;/code&gt; which is used to count words of input.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we have a text &lt;strong&gt;text.txt&lt;/strong&gt; file that has the following text:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Wassup ma brothers from other mothers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -w text.txt
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; text.txt

$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; --words text.txt
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; text.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-L&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;--max-line-length&lt;/code&gt; which is used to display the length of longest line in input. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we have a text &lt;strong&gt;text.txt&lt;/strong&gt; file that has the following text:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;123
123456789
12345&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -L text.txt
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; text.txt

$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; --max-line-length text.txt
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; text.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;You can pass more than one option like &lt;code class=&quot;language-text&quot;&gt;$ wc -lw text.txt&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;$ wc -l -w text.txt&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You can pass more than one file or a pattern like &lt;code class=&quot;language-text&quot;&gt;$ wc file1 file2&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;$ wc *.txt&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;wc&lt;/strong&gt; will always print new lines count first, then words then bytes then characters no matter how you order passed options.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;h2&gt;How to count words of a file in Linux?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;wc -w filename&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;wc --words filename&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to count new lines of a file in Linux?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;wc -l filename&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;wc --lines filename&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to count characters of a file in Linux?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;wc -m filename&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;wc -chars filename&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to display longest line length of a file in Linux?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;$ wc -L filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;$ wc --max-line-length filename&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is the difference between -c and -m options of wc in Linux?&lt;/h2&gt;
&lt;h2&gt;What is the difference between bytes count and characters count?&lt;/h2&gt;
&lt;p&gt;There’s no difference between &lt;code class=&quot;language-text&quot;&gt;-m&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;-c&lt;/code&gt; if the file contains only &lt;strong&gt;ASCII&lt;/strong&gt; characters because each &lt;strong&gt;ASCII&lt;/strong&gt; character will take only one byte.&lt;/p&gt;
&lt;p&gt;But they differ when there’s &lt;strong&gt;Unicode&lt;/strong&gt; characters in the file, some characters might take 2 or 4 bytes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For example&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Suppose we have a file &lt;strong&gt;text.txt&lt;/strong&gt; with the content of:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;123456789
©¥¢&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it has 3 non-ascii characters &lt;code class=&quot;language-text&quot;&gt;©&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;¥&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;¢&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; --chars text.txt 
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt; text.txt

$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; --bytes text.txt 
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt; text.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That means each of the three non-ascii characters took 2 bytes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;14 comes from 9 numbers, 3 non-ascii characters and 2 new lines.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><link>https://FrankenSteinxD.github.io/hello-world/</link><guid isPermaLink="false">https://FrankenSteinxD.github.io/hello-world/</guid><pubDate>Sun, 01 Sep 2019 00:00:00 GMT</pubDate><content:encoded></content:encoded></item></channel></rss>